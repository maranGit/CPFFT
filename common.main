c
c              all variables in param_def and common.main have
c              explicit type declarations.
c
c              code that includes param_def and or common.main
c              may then use =>  implicit none if desired
c
      include 'param_def'
c
c              --- double precision arrays/vectors ---
c
c              ifort (as of 17.0.2 for sure) sets starting alignment
c              as 64 bytes by default. Verified by simple test programs 
c              wiht optimization reports that show no peel loops and 
c              aligned access inside loop bodies.
c
c              put each vector into a separate common to facilitate
c              compiler alignment.
c                              
c
      common/dvecs1/ u(mxdof)
c
      common/dvecs2/ v(mxdof)
c
      common/dvecs3/ a(mxdof)
c
      common/dvecs4/ du(mxdof)
c
      common/dvecs5/ idu(mxdof)
c
      common/dvecs6/ load(mxdof)
c
      common/dvecs7/ res(mxdof)
c
      common/dvecs8/ ifv(mxdof)
c
      common/dvecs9/ c(mxncor) 
c
      common/dvecs10/ tol(mxcvtests)
c     
      double precision :: u, v, a, du, idu, load, res, ifv, c, tol
c
c              --- double precision scalars ---
c
      common/dblesclrs/ dt, nbeta, stplen, aparm, bparm, cparm, eparm,
     &    fparm, emax, fmax, prdmlt, total_mass, ext_work, beta_fact,
     &    total_model_time, eps_bbar, sum_ifv, sum_loads, 
     &    internal_energy, plastic_work, killed_ele_pls_work,
     &    killed_ele_int_work, scaling_adapt, scaling_factor
c     
      double precision :: dt, nbeta, stplen, aparm, bparm, cparm, 
     &    eparm, fparm, emax, fmax, prdmlt, total_mass, ext_work, 
     &    beta_fact, total_model_time, eps_bbar, sum_ifv, sum_loads,
     &    internal_energy, plastic_work, killed_ele_pls_work,
     &    killed_ele_int_work, scaling_adapt, scaling_factor
c
c              --- real arrays/vectors/scalars ---
c
      common/rvecs1/ props(mxelpr,mxel)
      common/rvecs2/ times(mxtim,2)
      common/rvecs3/ user_cnstrn_stp_factors(mxstep)
      common/rvecs4/ actual_cnstrn_stp_factors(mxstep)
      common/realscalars/ strtm, time_limit
c     
      real :: props, times, strtm, time_limit,
     &    user_cnstrn_stp_factors, actual_cnstrn_stp_factors
c
c              --- logical arrays/vectors/scalars ---
c
      common/logs/ prnres, halt, linmas, newstf, zrocon, newtrn, 
     &    newmas, incflg, ifvcmp, prlres, input_ok, adaptive_flag,
     &    new_constraints, batch_messages, signal_flag, 
     &    scalar_blocking, growth_k_flag, qbar_flag, 
     &    solver_out_of_core, show_details, new_analysis_param,
     &    sparse_stiff_output, sparse_stiff_binary, solver_threads,
     &    sparse_research, solver_mkl_iterative, temperatures,
     &    root_processor, slave_processor, worker_processor,
     &    use_mpi, ! end of scalars
     &    stpchk(mxstep), trace(ntrc), convrg(10)
c     
      logical :: prnres, halt, linmas, newstf, prlres, zrocon, newtrn,
     &    newmas, incflg, ifvcmp, input_ok, adaptive_flag, 
     &    new_constraints, batch_messages, signal_flag, 
     &    scalar_blocking, growth_k_flag, qbar_flag,
     &    solver_out_of_core, show_details, new_analysis_param,
     &    sparse_stiff_output, sparse_stiff_binary, sparse_research,
     &    solver_mkl_iterative, solver_threads, temperatures,
     &    stpchk, trace, convrg, root_processor, slave_processor, 
     &    worker_processor, use_mpi
c     
      logical :: lprops(mxelpr,mxel) ! only for equivalencing to props
      equivalence ( lprops, props )
c
c              --- integer arrays/vectors/scalars ---
c
      common/iarrays/ dstmap(mxnod), gpmap(mxtgp), cstmap(mxdof), 
     &    cp(mxedof), dcp(mxedof), icp(mxutsz,2), matlst(mxmat),
     &    lodlst(mxlc), prslst(mxlsz), plrlst(mxlsz), stprng(mxlc,2),
     &    state(mxtgp), bits(31),  outmap(mxlbel,mxelmp), 
     &    elblks(0:3,mxnmbl), blk_ptr_head(0:max_procs - 1),
     &    MPI_DOF_LOCAL(0:max_procs-1), num_dof_local(0:max_procs-1),
     &    proc_pids(1:max_procs-1)     ! end of arrays
c
      common/iscalars/ noelem, nonode, nummat, nogp, numcol,
     &    nodof, nlibel, numlod, nprs, nplrs, numstc, nelblk, numgrp,
     &    lgnmcn, mxiter, mniter, lgoump, mxlitr, num_term_ifv,
     &    num_term_loads, mathed, csthed,  lodhed, inctop, crdtop,
     &    in, out, histep, lowstp, ltmstp, restrt, num_warn, num_error, 
     &    num_fatal, solver_flag, old_solver_flag, solver_memory,
     &    num_threads,
     &    myid, numprocs, MPI_VAL, douextdb  
c
      integer :: dstmap, gpmap,cstmap, cp, dcp, icp, matlst, lodlst,
     &    prslst, plrlst, stprng, state, bits, outmap, elblks
      integer ::noelem, nonode, nummat, nogp, numcol, nodof, nlibel,
     &    numlod, nprs, nplrs, numstc, nelblk, numgrp, lgnmcn, mxiter,
     &    mniter, lgoump, mxlitr, num_term_ifv, num_term_loads, 
     &    mathed, csthed, lodhed, inctop, crdtop, in, out, histep, 
     &    lowstp, ltmstp, restrt, num_warn, num_error, num_fatal,
     &    solver_flag, old_solver_flag, solver_memory, num_threads,
     &    myid, numprocs, MPI_VAL, blk_ptr_head,
     &    MPI_DOF_LOCAL, num_dof_local, proc_pids, douextdb
c     
      integer :: iprops(mxelpr,mxel) ! only for equiv with props 
      equivalence ( iprops, props )
c
c              --- character arrays/vectors/scalars ---
c
      common/charvars/ lodnam(mxlc), lodtyp(mxlc), matnam(mxmat),
     &    elelib(mxlbel), snames(mxstc), stname, lsldnm, 
     &    solver_scr_dir, sparse_stiff_file_name
c     
      character(len=8)  :: lodnam, lodtyp, elelib, snames, stname,
     &    lsldnm
      character(len=24) :: matnam
      character(len=80) :: solver_scr_dir, sparse_stiff_file_name
c
c              --- end of common.main file ---
c